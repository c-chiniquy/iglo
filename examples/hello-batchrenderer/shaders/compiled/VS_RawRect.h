#if 0
;
; Note: shader requires additional functionality:
;       Resource descriptor heap indexing
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_VertexID              0   x           0   VERTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; COLOR                    0   xyzw        1     NONE   float   xyzw
;
; shader hash: 61bae663a2c778a3a49c1a03f1d7a56f
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Vertex Shader
; OutputPositionPresent=1
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 1
; SigOutputElements: 2
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 1
; SigOutputVectors[0]: 2
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: VSMain
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; COLOR                    0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [28 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 1, outputs: 8
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0 }
;   output 1 depends on inputs: { 0 }
;   output 2 depends on inputs: { 0 }
;   output 3 depends on inputs: { 0 }
;   output 4 depends on inputs: { 0 }
;   output 5 depends on inputs: { 0 }
;   output 6 depends on inputs: { 0 }
;   output 7 depends on inputs: { 0 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%pushConstants = type { %struct.PushConstants }
%struct.PushConstants = type { i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #0

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #0

define void @VSMain() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 13, i32 28 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %3 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = alloca [6 x float], align 4
  %5 = alloca [6 x float], align 4
  %6 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %2, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %7 = extractvalue %dx.types.CBufRet.i32 %6, 2
  %8 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %7, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %10 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %2, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %11 = extractvalue %dx.types.CBufRet.i32 %10, 2
  %12 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %11, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 13, i32 64 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %14 = extractvalue %dx.types.CBufRet.i32 %10, 3
  %15 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %14, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 13, i32 64 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %17 = udiv i32 %3, 6
  %18 = urem i32 %3, 6
  %19 = mul i32 %17, 20
  %20 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %9, i32 %19, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %21 = extractvalue %dx.types.ResRet.i32 %20, 0
  %22 = extractvalue %dx.types.ResRet.i32 %20, 1
  %23 = bitcast i32 %21 to float
  %24 = bitcast i32 %22 to float
  %25 = add i32 %19, 8
  %26 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %9, i32 %25, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %27 = extractvalue %dx.types.ResRet.i32 %26, 0
  %28 = add i32 %19, 12
  %29 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %9, i32 %28, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %30 = extractvalue %dx.types.ResRet.i32 %29, 0
  %31 = add i32 %19, 16
  %32 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %9, i32 %31, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %33 = extractvalue %dx.types.ResRet.i32 %32, 0
  %34 = bitcast [6 x float]* %4 to i8*
  call void @llvm.lifetime.start(i64 24, i8* %34) #0
  %35 = bitcast [6 x float]* %5 to i8*
  call void @llvm.lifetime.start(i64 24, i8* %35) #0
  %36 = getelementptr [6 x float], [6 x float]* %4, i32 0, i32 0
  %37 = getelementptr [6 x float], [6 x float]* %5, i32 0, i32 0
  store float 0.000000e+00, float* %36, align 4
  store float 0.000000e+00, float* %37, align 4
  %38 = getelementptr [6 x float], [6 x float]* %4, i32 0, i32 1
  %39 = getelementptr [6 x float], [6 x float]* %5, i32 0, i32 1
  %40 = bitcast float* %38 to i32*
  store i32 %27, i32* %40, align 4
  store float 0.000000e+00, float* %39, align 4
  %41 = getelementptr [6 x float], [6 x float]* %4, i32 0, i32 2
  %42 = getelementptr [6 x float], [6 x float]* %5, i32 0, i32 2
  store float 0.000000e+00, float* %41, align 4
  %43 = bitcast float* %42 to i32*
  store i32 %30, i32* %43, align 4
  %44 = getelementptr [6 x float], [6 x float]* %4, i32 0, i32 3
  %45 = getelementptr [6 x float], [6 x float]* %5, i32 0, i32 3
  store float 0.000000e+00, float* %44, align 4
  %46 = bitcast float* %45 to i32*
  store i32 %30, i32* %46, align 4
  %47 = getelementptr [6 x float], [6 x float]* %4, i32 0, i32 4
  %48 = getelementptr [6 x float], [6 x float]* %5, i32 0, i32 4
  %49 = bitcast float* %47 to i32*
  store i32 %27, i32* %49, align 4
  store float 0.000000e+00, float* %48, align 4
  %50 = getelementptr [6 x float], [6 x float]* %4, i32 0, i32 5
  %51 = getelementptr [6 x float], [6 x float]* %5, i32 0, i32 5
  %52 = bitcast float* %50 to i32*
  store i32 %27, i32* %52, align 4
  %53 = bitcast float* %51 to i32*
  store i32 %30, i32* %53, align 4
  %54 = getelementptr [6 x float], [6 x float]* %4, i32 0, i32 %18
  %55 = getelementptr [6 x float], [6 x float]* %5, i32 0, i32 %18
  %56 = load float, float* %54, align 4
  %57 = load float, float* %55, align 4
  %58 = fadd fast float %56, %23
  %59 = fadd fast float %57, %24
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %13, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.f32 %60, 3
  %64 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %13, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.f32 %64, 0
  %66 = extractvalue %dx.types.CBufRet.f32 %64, 1
  %67 = extractvalue %dx.types.CBufRet.f32 %64, 3
  %68 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %13, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.f32 %68, 0
  %70 = extractvalue %dx.types.CBufRet.f32 %68, 1
  %71 = extractvalue %dx.types.CBufRet.f32 %68, 3
  %72 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %13, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %73 = extractvalue %dx.types.CBufRet.f32 %72, 0
  %74 = extractvalue %dx.types.CBufRet.f32 %72, 1
  %75 = extractvalue %dx.types.CBufRet.f32 %72, 3
  %76 = fmul fast float %61, %58
  %77 = call float @dx.op.tertiary.f32(i32 46, float %59, float %62, float %76)  ; FMad(a,b,c)
  %78 = fadd fast float %77, %63
  %79 = fmul fast float %65, %58
  %80 = call float @dx.op.tertiary.f32(i32 46, float %59, float %66, float %79)  ; FMad(a,b,c)
  %81 = fadd fast float %80, %67
  %82 = fmul fast float %69, %58
  %83 = call float @dx.op.tertiary.f32(i32 46, float %59, float %70, float %82)  ; FMad(a,b,c)
  %84 = fadd fast float %83, %71
  %85 = fmul fast float %73, %58
  %86 = call float @dx.op.tertiary.f32(i32 46, float %59, float %74, float %85)  ; FMad(a,b,c)
  %87 = fadd fast float %86, %75
  %88 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.f32 %88, 0
  %90 = extractvalue %dx.types.CBufRet.f32 %88, 1
  %91 = extractvalue %dx.types.CBufRet.f32 %88, 2
  %92 = extractvalue %dx.types.CBufRet.f32 %88, 3
  %93 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %94 = extractvalue %dx.types.CBufRet.f32 %93, 0
  %95 = extractvalue %dx.types.CBufRet.f32 %93, 1
  %96 = extractvalue %dx.types.CBufRet.f32 %93, 2
  %97 = extractvalue %dx.types.CBufRet.f32 %93, 3
  %98 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %99 = extractvalue %dx.types.CBufRet.f32 %98, 0
  %100 = extractvalue %dx.types.CBufRet.f32 %98, 1
  %101 = extractvalue %dx.types.CBufRet.f32 %98, 2
  %102 = extractvalue %dx.types.CBufRet.f32 %98, 3
  %103 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %104 = extractvalue %dx.types.CBufRet.f32 %103, 0
  %105 = extractvalue %dx.types.CBufRet.f32 %103, 1
  %106 = extractvalue %dx.types.CBufRet.f32 %103, 2
  %107 = extractvalue %dx.types.CBufRet.f32 %103, 3
  %108 = fmul fast float %89, %78
  %109 = call float @dx.op.tertiary.f32(i32 46, float %81, float %90, float %108)  ; FMad(a,b,c)
  %110 = call float @dx.op.tertiary.f32(i32 46, float %84, float %91, float %109)  ; FMad(a,b,c)
  %111 = call float @dx.op.tertiary.f32(i32 46, float %87, float %92, float %110)  ; FMad(a,b,c)
  %112 = fmul fast float %94, %78
  %113 = call float @dx.op.tertiary.f32(i32 46, float %81, float %95, float %112)  ; FMad(a,b,c)
  %114 = call float @dx.op.tertiary.f32(i32 46, float %84, float %96, float %113)  ; FMad(a,b,c)
  %115 = call float @dx.op.tertiary.f32(i32 46, float %87, float %97, float %114)  ; FMad(a,b,c)
  %116 = fmul fast float %99, %78
  %117 = call float @dx.op.tertiary.f32(i32 46, float %81, float %100, float %116)  ; FMad(a,b,c)
  %118 = call float @dx.op.tertiary.f32(i32 46, float %84, float %101, float %117)  ; FMad(a,b,c)
  %119 = call float @dx.op.tertiary.f32(i32 46, float %87, float %102, float %118)  ; FMad(a,b,c)
  %120 = fmul fast float %104, %78
  %121 = call float @dx.op.tertiary.f32(i32 46, float %81, float %105, float %120)  ; FMad(a,b,c)
  %122 = call float @dx.op.tertiary.f32(i32 46, float %84, float %106, float %121)  ; FMad(a,b,c)
  %123 = call float @dx.op.tertiary.f32(i32 46, float %87, float %107, float %122)  ; FMad(a,b,c)
  %124 = and i32 %33, 255
  %125 = uitofp i32 %124 to float
  %126 = fmul fast float %125, 0x3F70101020000000
  %127 = lshr i32 %33, 8
  %128 = and i32 %127, 255
  %129 = uitofp i32 %128 to float
  %130 = fmul fast float %129, 0x3F70101020000000
  %131 = lshr i32 %33, 16
  %132 = and i32 %131, 255
  %133 = uitofp i32 %132 to float
  %134 = fmul fast float %133, 0x3F70101020000000
  %135 = lshr i32 %33, 24
  %136 = uitofp i32 %135 to float
  %137 = fmul fast float %136, 0x3F70101020000000
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %111)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %115)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %119)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %123)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %126)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %130)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %134)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %137)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @llvm.lifetime.end(i64 24, i8* %34) #0
  call void @llvm.lifetime.end(i64 24, i8* %35) #0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromHeap(i32, i32, i1, i1) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #1

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"dxc(private) 1.8.0.4739 (d9a5e97d0)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 9}
!3 = !{!"vs", i32 6, i32 6}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %pushConstants* undef, !"", i32 0, i32 0, i32 1, i32 28, null}
!7 = !{[3 x i32] [i32 1, i32 8, i32 255]}
!8 = !{void ()* @VSMain, !"VSMain", !9, !4, !18}
!9 = !{!10, !14, null}
!10 = !{!11}
!11 = !{i32 0, !"SV_VertexID", i8 5, i8 1, !12, i8 0, i32 1, i8 1, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 1}
!14 = !{!15, !17}
!15 = !{i32 0, !"SV_Position", i8 9, i8 3, !12, i8 4, i32 1, i8 4, i32 0, i8 0, !16}
!16 = !{i32 3, i32 15}
!17 = !{i32 1, !"COLOR", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 1, i8 0, !16}
!18 = !{i32 0, i64 1073741824}

#endif

const unsigned char g_VS_RawRect[] = {
  0x44, 0x58, 0x42, 0x43, 0xbe, 0x27, 0xf6, 0x10, 0x99, 0x13, 0x6b, 0xfb,
  0xd9, 0xf4, 0x0b, 0x35, 0x3a, 0x4f, 0xfe, 0x07, 0x01, 0x00, 0x00, 0x00,
  0x80, 0x0d, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00,
  0xa8, 0x01, 0x00, 0x00, 0xc4, 0x01, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x49, 0x44, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x5c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50,
  0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0xb8, 0x00, 0x00, 0x00,
  0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x01,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4f, 0x4c,
  0x4f, 0x52, 0x00, 0x56, 0x53, 0x4d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x01,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x44, 0x03, 0x03, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x61, 0xba, 0xe6, 0x63, 0xa2, 0xc7, 0x78, 0xa3,
  0xa4, 0x9c, 0x1a, 0x03, 0xf1, 0xd7, 0xa5, 0x6f, 0x44, 0x58, 0x49, 0x4c,
  0xb4, 0x0b, 0x00, 0x00, 0x66, 0x00, 0x01, 0x00, 0xed, 0x02, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x06, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x9c, 0x0b, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0xe4, 0x02, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x1b, 0x88, 0x40, 0x00, 0x96, 0x0d, 0x84, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff,
  0xff, 0x1f, 0x00, 0x09, 0xa0, 0x36, 0x18, 0xc4, 0xff, 0xff, 0xff, 0xff,
  0x0f, 0x80, 0x04, 0x54, 0x00, 0x00, 0x00, 0x00, 0x49, 0x18, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x84, 0x40, 0x98, 0x10, 0x0c, 0x13, 0x02,
  0x61, 0x42, 0x40, 0x00, 0x89, 0x20, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00,
  0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84,
  0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c,
  0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xb0, 0xc1, 0x08, 0xc0, 0x1c, 0x01, 0x28,
  0xcc, 0x11, 0x20, 0x24, 0x94, 0x01, 0x08, 0x06, 0x22, 0x4a, 0x00, 0x90,
  0x31, 0x47, 0x00, 0x06, 0xc5, 0x40, 0x10, 0x04, 0x11, 0x10, 0x4a, 0x66,
  0x00, 0x8a, 0x01, 0x20, 0x08, 0x22, 0x2c, 0xc4, 0xdc, 0x33, 0x5c, 0xfe,
  0x84, 0x3d, 0x84, 0xe4, 0x87, 0x40, 0x33, 0x2c, 0x04, 0x0a, 0x86, 0x39,
  0x82, 0xa0, 0x14, 0x0e, 0x82, 0x3c, 0x0f, 0x41, 0x47, 0x0d, 0x97, 0x3f,
  0x61, 0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15, 0x2b, 0x31, 0xf9, 0xc5, 0x6d,
  0x23, 0x62, 0x59, 0x96, 0xa5, 0x10, 0x12, 0xe2, 0x20, 0x34, 0xdd, 0x34,
  0x5c, 0xfe, 0x84, 0x3d, 0x84, 0xe4, 0xaf, 0x84, 0xb4, 0x12, 0x93, 0x8f,
  0xdc, 0x36, 0x2a, 0x10, 0x04, 0x41, 0x90, 0x72, 0x54, 0x88, 0x83, 0x20,
  0x02, 0x42, 0xd6, 0x51, 0xc3, 0xe5, 0x4f, 0xd8, 0x43, 0x48, 0x3e, 0xb7,
  0x51, 0xc5, 0x4a, 0x4c, 0x3e, 0x72, 0xdb, 0x88, 0x40, 0x10, 0x04, 0x29,
  0x04, 0x86, 0x38, 0x08, 0x65, 0xa5, 0x58, 0x90, 0x65, 0x59, 0x68, 0xbb,
  0x6d, 0xb8, 0xfc, 0x09, 0x7b, 0x08, 0xc9, 0x5f, 0x09, 0xc9, 0xa1, 0x22,
  0x81, 0x48, 0x23, 0xe7, 0x21, 0xa2, 0x09, 0x21, 0x24, 0x24, 0x20, 0x48,
  0x21, 0x1c, 0xc4, 0xe9, 0xc8, 0x3b, 0x68, 0xb8, 0xfc, 0x09, 0x7b, 0x08,
  0xc9, 0x5f, 0x09, 0x69, 0x43, 0x9a, 0x01, 0x11, 0x08, 0x82, 0x08, 0xa5,
  0x70, 0x10, 0x10, 0x79, 0x28, 0x1c, 0x08, 0x38, 0x4a, 0x9a, 0x22, 0x4a,
  0x98, 0xfc, 0x94, 0x92, 0x0e, 0xce, 0x69, 0xa4, 0x09, 0x68, 0x26, 0x09,
  0x1d, 0x08, 0x82, 0x20, 0x08, 0x82, 0x5c, 0xf3, 0x50, 0xd2, 0xc1, 0x39,
  0x8d, 0x34, 0x01, 0xcd, 0x24, 0xa1, 0x80, 0xa4, 0x32, 0x07, 0x90, 0x34,
  0x58, 0x08, 0xa5, 0x85, 0x10, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0,
  0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d,
  0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74,
  0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6,
  0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78,
  0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x43, 0x1e, 0x02, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x86, 0x3c, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x24, 0x40, 0x00, 0x08, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x61, 0x80, 0x00, 0x18,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x03, 0x01, 0x01,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x67, 0x02,
  0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f,
  0x05, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43,
  0x9e, 0x0c, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x86, 0x3c, 0x1b, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x79, 0x3c, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x18, 0xf2, 0x84, 0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x64, 0x81, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x0a, 0x0a, 0x10, 0x10, 0x10, 0x10, 0x81, 0x84, 0x52,
  0x28, 0x81, 0x11, 0x80, 0x92, 0x28, 0x83, 0x42, 0x28, 0x02, 0x42, 0x4a,
  0xa0, 0x18, 0x4a, 0x62, 0x04, 0xa0, 0x70, 0xca, 0xa0, 0x3c, 0xc8, 0x9c,
  0x01, 0xa0, 0x73, 0xac, 0x21, 0x40, 0xfe, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90,
  0x46, 0x02, 0x13, 0xc4, 0x31, 0x20, 0xc3, 0x1b, 0x43, 0x81, 0x93, 0x4b,
  0xb3, 0x0b, 0xa3, 0x2b, 0x4b, 0x01, 0x89, 0x71, 0xc1, 0x71, 0x81, 0x71,
  0xa1, 0xb9, 0x99, 0xc9, 0x01, 0x41, 0x21, 0xcb, 0x09, 0xab, 0x29, 0xcb,
  0xb9, 0x21, 0x83, 0x49, 0xd9, 0x10, 0x04, 0x13, 0x04, 0x84, 0x9a, 0x20,
  0x20, 0xd5, 0x06, 0x61, 0x20, 0x26, 0x08, 0x88, 0xb5, 0x41, 0x18, 0x0c,
  0x0a, 0x76, 0x73, 0x1b, 0x06, 0x84, 0x20, 0x26, 0x08, 0xc8, 0x35, 0x41,
  0x30, 0x83, 0x8d, 0xc0, 0x04, 0x01, 0xc1, 0x36, 0x20, 0xca, 0xc2, 0x28,
  0xca, 0xd0, 0x00, 0x1b, 0x02, 0x67, 0x03, 0x01, 0x00, 0x0f, 0x30, 0x41,
  0x38, 0x03, 0x6e, 0x43, 0x10, 0x4d, 0x10, 0x0e, 0x81, 0x86, 0xd5, 0x54,
  0x53, 0x58, 0x9a, 0x1b, 0x97, 0x29, 0xab, 0x2f, 0xab, 0x32, 0x39, 0xba,
  0x32, 0xbc, 0x24, 0xa2, 0x09, 0x82, 0xd0, 0x4c, 0x10, 0x04, 0x67, 0x43,
  0xa0, 0x4c, 0x10, 0x84, 0x67, 0x82, 0x80, 0x64, 0x1b, 0x04, 0x6d, 0xd8,
  0xb0, 0x28, 0x95, 0x75, 0x61, 0xd9, 0x70, 0x29, 0xd9, 0xb6, 0x21, 0xe0,
  0xb8, 0x4c, 0x59, 0x7d, 0x41, 0xbd, 0xcd, 0xa5, 0xd1, 0xa5, 0xbd, 0xb9,
  0x4d, 0x10, 0x04, 0x68, 0x82, 0x20, 0x44, 0x13, 0x04, 0x41, 0x9a, 0x20,
  0x20, 0xda, 0x06, 0x41, 0x13, 0x83, 0x0d, 0x8b, 0xe2, 0x7d, 0x60, 0x80,
  0x85, 0xc1, 0x10, 0x06, 0x4a, 0x36, 0x06, 0x2c, 0x86, 0x9e, 0x98, 0x9e,
  0xa4, 0x26, 0x08, 0xc2, 0xb4, 0x61, 0x19, 0xca, 0xe0, 0xcb, 0x30, 0x33,
  0x18, 0xc2, 0x60, 0xc8, 0xc6, 0x60, 0x83, 0x40, 0x06, 0x67, 0xb0, 0x61,
  0xe8, 0xd0, 0x00, 0x98, 0x20, 0x04, 0xcc, 0x06, 0x41, 0x51, 0x83, 0x0d,
  0xc5, 0x44, 0xa5, 0x01, 0xb4, 0x06, 0x55, 0xd8, 0xd8, 0xec, 0xda, 0x5c,
  0xd2, 0xc8, 0xca, 0xdc, 0xe8, 0xa6, 0x04, 0x41, 0x15, 0x32, 0x3c, 0x17,
  0xbb, 0x32, 0xb9, 0xb9, 0xb4, 0x37, 0xb7, 0x29, 0x01, 0xd1, 0x84, 0x0c,
  0xcf, 0xc5, 0x2e, 0x8c, 0xcd, 0xae, 0x4c, 0x6e, 0x4a, 0x60, 0xd4, 0x21,
  0xc3, 0x73, 0x99, 0x43, 0x0b, 0x23, 0x2b, 0x93, 0x6b, 0x7a, 0x23, 0x2b,
  0x63, 0x9b, 0x12, 0x20, 0x65, 0xc8, 0xf0, 0x5c, 0xe4, 0xca, 0xe6, 0xde,
  0xea, 0xe4, 0xc6, 0xca, 0xe6, 0xa6, 0x04, 0x4f, 0x1d, 0x32, 0x3c, 0x17,
  0xbb, 0xb4, 0xb2, 0xbb, 0x24, 0xb2, 0x29, 0xba, 0x30, 0xba, 0xb2, 0x29,
  0x41, 0x54, 0x87, 0x0c, 0xcf, 0xa5, 0xcc, 0x8d, 0x4e, 0x2e, 0x0f, 0xea,
  0x2d, 0xcd, 0x8d, 0x6e, 0x6e, 0x4a, 0xb0, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70,
  0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xd1, 0x43, 0x0e, 0xf8,
  0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06, 0xf6, 0x10, 0x0e, 0xf2,
  0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f, 0xf4, 0x00, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x26, 0x60, 0xbc, 0xac,
  0x09, 0x20, 0x8d, 0x29, 0x50, 0xc3, 0xe5, 0x3b, 0x8f, 0x0f, 0x34, 0x8d,
  0x33, 0x01, 0x13, 0x11, 0x02, 0xcd, 0xb0, 0x10, 0x66, 0xb0, 0x0d, 0x97,
  0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25,
  0x61, 0x00, 0x02, 0xe6, 0x17, 0xb7, 0x6d, 0x08, 0xdb, 0x70, 0xf9, 0xce,
  0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06,
  0x20, 0x60, 0x3e, 0x72, 0xdb, 0xb6, 0xd0, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x10, 0x11, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c, 0xc4, 0x17, 0x39, 0xcc,
  0x86, 0x34, 0x03, 0xd2, 0x18, 0x56, 0xa0, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x10, 0x11, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c, 0xc4, 0x17, 0x39, 0x4c,
  0x48, 0x00, 0x8f, 0x0d, 0x4c, 0xc3, 0xe5, 0x3b, 0x8f, 0xbf, 0x38, 0xc0,
  0x20, 0x36, 0x0f, 0x35, 0xf9, 0xc8, 0x6d, 0xdb, 0xc1, 0x35, 0x5c, 0xbe,
  0xf3, 0xf8, 0x11, 0x60, 0x6d, 0x54, 0x51, 0x10, 0x51, 0xe9, 0x00, 0x83,
  0x8f, 0xdc, 0xb6, 0x11, 0x54, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x4d, 0x4e,
  0x44, 0xa0, 0xd4, 0xf4, 0x50, 0x93, 0x5f, 0xdc, 0xb6, 0x25, 0x48, 0xc3,
  0xe5, 0x3b, 0x8f, 0x3f, 0x11, 0xd1, 0x84, 0x00, 0x11, 0xe6, 0x17, 0xb7,
  0x6d, 0x01, 0xd1, 0xb2, 0x54, 0x8c, 0xbf, 0x20, 0x05, 0x31, 0x21, 0x0c,
  0xe1, 0x13, 0xcd, 0x60, 0x00, 0xd3, 0xb2, 0x54, 0x8c, 0xbf, 0x20, 0x05,
  0x31, 0x21, 0x0c, 0xe1, 0x4b, 0x13, 0x10, 0x4d, 0x00, 0x00, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x32, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x14, 0x0c, 0x21,
  0xc5, 0x55, 0x76, 0xa5, 0x50, 0x08, 0x33, 0x00, 0x05, 0x3b, 0x50, 0x96,
  0x02, 0x45, 0x50, 0xb4, 0x03, 0xe5, 0x3f, 0x50, 0x1a, 0x05, 0x51, 0x20,
  0x25, 0x3b, 0x50, 0x16, 0x05, 0x18, 0x50, 0x28, 0x85, 0x51, 0x30, 0xf4,
  0x8c, 0x00, 0xd0, 0x32, 0x46, 0x10, 0x92, 0x60, 0x88, 0x77, 0x23, 0x00,
  0xd4, 0xcd, 0x21, 0xa0, 0x41, 0x1b, 0xcc, 0x21, 0xa0, 0x01, 0x36, 0x87,
  0xc0, 0x06, 0x17, 0x81, 0x73, 0x10, 0xd7, 0x75, 0x4d, 0x00, 0x00, 0x00,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x10, 0x06, 0x6d, 0xd0, 0x04, 0x61,
  0x70, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x81, 0xf7, 0x06, 0x56, 0x40,
  0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x41, 0x72, 0x07, 0xd9, 0x18, 0x8c,
  0xc1, 0x1a, 0x60, 0x33, 0x11, 0x68, 0x80, 0x50, 0xa3, 0x30, 0x13, 0x81,
  0x06, 0x08, 0x35, 0x0a, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x90, 0xd5,
  0x81, 0x47, 0xa4, 0xc1, 0x68, 0x42, 0x20, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0x01, 0xa4, 0x07, 0x59, 0xe0, 0x38, 0x23, 0x06, 0x07, 0x00, 0x82,
  0x60, 0xe0, 0xd9, 0x41, 0x17, 0x28, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0x90, 0xe5, 0x81, 0x18, 0x20, 0x6a, 0x30, 0x9a, 0x10, 0x08, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x00, 0xf9, 0x41, 0x17, 0x48, 0xd2, 0x88, 0xc1,
  0x01, 0x80, 0x20, 0x18, 0x78, 0x7a, 0x10, 0x06, 0x01, 0x34, 0x9a, 0x40,
  0x0c, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x00, 0x85, 0x02, 0x18, 0x04,
  0x55, 0x35, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x5e, 0x1f, 0x90, 0x41,
  0x30, 0x95, 0x33, 0x07, 0x53, 0x0f, 0x1d, 0x54, 0x09, 0x9c, 0x8c, 0x18,
  0x28, 0x00, 0x08, 0x82, 0x81, 0x45, 0x0a, 0x67, 0xb0, 0x04, 0x69, 0xa0,
  0x07, 0x6a, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x70, 0xc2, 0xb2,
  0x27, 0x2c, 0x5b, 0xc6, 0x19, 0xc0, 0x88, 0x81, 0x02, 0x80, 0x20, 0x18,
  0x58, 0xaa, 0xd0, 0x06, 0x51, 0xf0, 0x06, 0xa3, 0x00, 0x07, 0xa3, 0x09,
  0x01, 0x50, 0x09, 0x19, 0xc0, 0x88, 0x81, 0x02, 0x80, 0x20, 0x18, 0x58,
  0xad, 0x00, 0x07, 0x54, 0x20, 0x07, 0xa6, 0x30, 0x07, 0xa3, 0x09, 0x01,
  0x50, 0x0c, 0x1b, 0xc0, 0x88, 0x81, 0x02, 0x80, 0x20, 0x18, 0x58, 0xb0,
  0x30, 0x07, 0x57, 0x50, 0x07, 0xa9, 0x60, 0x07, 0xa3, 0x09, 0x01, 0x70,
  0xde, 0xb0, 0x23, 0x06, 0xc6, 0x00, 0x82, 0x60, 0x40, 0xe8, 0x42, 0x1f,
  0x04, 0xe7, 0x0d, 0x3b, 0x62, 0x60, 0x0c, 0x20, 0x08, 0x06, 0xc4, 0x2e,
  0xf8, 0x41, 0xb0, 0xd0, 0x01, 0x0c, 0x48, 0x81, 0x14, 0x16, 0x3a, 0x80,
  0x41, 0x29, 0x94, 0xc2, 0xb0, 0x01, 0x21, 0xa8, 0xc1, 0x00, 0x0c, 0x1b,
  0x10, 0x81, 0x1a, 0x0c, 0xc0, 0x42, 0x07, 0x31, 0x30, 0x85, 0x54, 0x58,
  0xe8, 0x20, 0x06, 0xa7, 0xa0, 0x0a, 0x27, 0xac, 0x3b, 0x6c, 0x40, 0x04,
  0xce, 0x00, 0x0c, 0x1b, 0x10, 0x42, 0x1b, 0x0c, 0xc0, 0x42, 0x87, 0x32,
  0x48, 0x85, 0x3d, 0x58, 0xe8, 0x50, 0x06, 0xaa, 0xc0, 0x07, 0xc3, 0x06,
  0x84, 0xf0, 0x06, 0x03, 0x70, 0xc1, 0xba, 0xc3, 0x06, 0x44, 0xe0, 0x0c,
  0xc0, 0x42, 0x07, 0x34, 0x60, 0x05, 0x55, 0x58, 0xe8, 0x80, 0x06, 0xad,
  0xb0, 0x0a, 0xc3, 0x06, 0x84, 0x20, 0x07, 0x03, 0x70, 0xc1, 0xba, 0xc3,
  0x06, 0x44, 0x10, 0x0d, 0xc0, 0x42, 0x87, 0x35, 0x78, 0x85, 0x52, 0x58,
  0xe8, 0xb0, 0x06, 0xb0, 0x60, 0x0a, 0x27, 0xac, 0x3b, 0x6c, 0x40, 0x04,
  0xd7, 0x00, 0x0c, 0x1b, 0x10, 0x82, 0x1d, 0x0c, 0xc0, 0x42, 0x07, 0x37,
  0x90, 0x85, 0x54, 0x58, 0xe8, 0xe0, 0x06, 0xb3, 0xa0, 0x0a, 0x27, 0xac,
  0x3b, 0x6c, 0x40, 0x04, 0xda, 0x00, 0x9c, 0xb0, 0xee, 0xb0, 0x01, 0x11,
  0x60, 0x03, 0xb0, 0xd0, 0x41, 0x0e, 0x6c, 0x81, 0x0c, 0x16, 0x3a, 0xc8,
  0xc1, 0x2d, 0x94, 0x01, 0x09, 0xcb, 0x20, 0x61, 0x19, 0x26, 0x8c, 0x01,
  0x7c, 0x4c, 0x18, 0x03, 0xf8, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1,
  0xd4, 0x0e, 0xb4, 0xf0, 0x06, 0xbc, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09,
  0x42, 0x30, 0x9a, 0x30, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30,
  0xc5, 0x03, 0x2e, 0xcc, 0xc1, 0x38, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82,
  0x10, 0x8c, 0x26, 0x0c, 0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x4c,
  0xf5, 0xc0, 0x0b, 0x77, 0x60, 0x0b, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20,
  0x04, 0xa3, 0x09, 0xc3, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x53,
  0x3e, 0x80, 0xc3, 0x1e, 0x98, 0xc3, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08,
  0xc1, 0x68, 0xc2, 0x30, 0xd8, 0x23, 0xc9, 0x67, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0xb6, 0x7d, 0x30, 0x07, 0xe9, 0x09, 0x2c, 0x78, 0xa0, 0x63,
  0x4e, 0x25, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xd8, 0xfc, 0x21,
  0x1d, 0x2a, 0x27, 0xb0, 0xc0, 0x81, 0x8e, 0x35, 0x98, 0x7c, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0x60, 0x0b, 0x09, 0x76, 0xc0, 0x9a, 0xc0, 0x82,
  0x06, 0x3a, 0xc6, 0x6c, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83,
  0x8d, 0x24, 0xde, 0x61, 0x63, 0x02, 0x0b, 0x18, 0xe8, 0x8c, 0x18, 0x1c,
  0x00, 0x08, 0x82, 0xc1, 0x94, 0x12, 0xf0, 0x80, 0x0a, 0xf8, 0x30, 0x9a,
  0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4,
  0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x93, 0x4b, 0xd4, 0x43, 0x2b,
  0x80, 0xc4, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20,
  0x8c, 0x26, 0x10, 0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x4c, 0x33,
  0xa1, 0x0f, 0xb2, 0x40, 0x0f, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82,
  0x60, 0x30, 0xe1, 0xc4, 0x3f, 0xdc, 0x42, 0x49, 0x8c, 0x26, 0x04, 0xc0,
  0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0xd8, 0xe4,
  0xc9, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb6, 0x9d, 0x30, 0x09,
  0x6e, 0x0a, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x60, 0xe3, 0x89, 0x93,
  0xd0, 0xa6, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb6, 0x9e, 0x40,
  0x09, 0x6c, 0x0a, 0x4c, 0x12, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0xc1, 0xf6, 0x13, 0x2a, 0x01, 0x06, 0x52, 0x30, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0x1b, 0x58, 0xac, 0x84, 0x27, 0x05, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0xb0, 0x85, 0x05, 0x4b, 0x70, 0x52, 0x60, 0x91, 0x19,
  0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb6, 0xb1, 0x70, 0x09,
  0x32, 0x88, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xd8, 0xc8, 0xe2,
  0x25, 0xc4, 0x20, 0x0a, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x60, 0x2b,
  0x0b, 0x98, 0x00, 0x83, 0x28, 0x30, 0x48, 0x0d, 0xe4, 0x33, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0xdb, 0x59, 0xc8, 0x04, 0x1a, 0x40, 0xc1, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x6c, 0x68, 0x31, 0x13, 0x66, 0x00, 0x05,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xb0, 0xa5, 0x05, 0x4d, 0x90, 0x01,
  0x14, 0xd4, 0x2e, 0xb0, 0x84, 0x5e, 0xb0, 0x94, 0x05, 0x23, 0x21, 0x9f,
  0xf2, 0x85, 0x96, 0xc0, 0x0a, 0x60, 0x42, 0x2f, 0x58, 0xca, 0x82, 0x93,
  0x90, 0x4f, 0x89, 0x03, 0x4c, 0x60, 0x05, 0x34, 0xa1, 0x17, 0x2c, 0x65,
  0xc1, 0x4a, 0xc8, 0xa7, 0xcc, 0xc1, 0x25, 0xf0, 0x82, 0xa5, 0x2c, 0x70,
  0x09, 0xf9, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0xd3, 0x17, 0x61,
  0xa1, 0x16, 0x6a, 0x21, 0x17, 0xdb, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x30, 0x7d, 0x11, 0x16, 0x6a, 0xa1, 0x16, 0x73, 0x71, 0x8d, 0x18, 0x24,
  0x00, 0x08, 0x82, 0x01, 0xd3, 0x17, 0x61, 0xa1, 0x16, 0x6a, 0xe1, 0x16,
  0xd3, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x30, 0x7d, 0x11, 0x16, 0x6a,
  0xa1, 0x16, 0x70, 0xf1, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0xd3,
  0x17, 0x61, 0xd1, 0x16, 0x6a, 0x21, 0x17, 0xcc, 0x88, 0x41, 0x02, 0x80,
  0x20, 0x18, 0x30, 0x7d, 0x11, 0x16, 0x6d, 0xa1, 0x16, 0x73, 0x81, 0x8c,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0xd3, 0x17, 0x61, 0xd1, 0x16, 0x6a,
  0xe1, 0x16, 0xc4, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x30, 0x7d, 0x11,
  0x16, 0x6d, 0xa1, 0x16, 0x70, 0x11, 0x8c, 0x18, 0x18, 0x03, 0x08, 0x82,
  0x01, 0x01, 0x1a, 0x64, 0x81, 0x0e, 0x23, 0x06, 0xc6, 0x00, 0x82, 0x60,
  0x40, 0x80, 0x06, 0x59, 0x9c, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
};
