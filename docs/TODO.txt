
TODO: Fix the segmentation fault in XCloseDisplay() caused by the interplay between X11 and the NVIDIA driver on Linux.
      Someone else had a similar problem and fixed it by unloading the X11 window before unloading the vulkan instance:
      https://github.com/KhronosGroup/Vulkan-LoaderAndValidationLayers/issues/1894
      I changed the unload order in Linux to first unload the X11 window and then the vulkan instance, but it didn't stop the segfault.
      Now it just segfaults in _XSend() instead when cleaning up the vulkan instance.
      So for now, the Linux backend is segfaulting during cleanup if using NVIDIA drivers.

TODO: Unit tests.

TODO: Write iglo tutorials and guides.

TODO: Helper functions/classes for common 3D rendering operations, such as parsing mesh files,
      provide common material shaders/pipelines, etc.

TODO: A tool to convert a bmfont .fnt text file to an iglo PrebakedFontData struct or iglo prebaked font file.
      iglo uses STB's font rasterizer to rasterize glyphs in real time, but BMFont can rasterize glyphs at smaller font sizes better.
      So this would be useful for users who want to use BMFont to rasterize glyphs instead of STB.
      BMFont webpage: https://www.angelcode.com/products/bmfont/

TODO: Implement support for loading DDS textures that use BC6 and BC7 block compression formats.

TODO: The BaseCamera class can probably be improved somewhat.

TODO: In D3D12, using CreatePlacedResource() is faster than using CreateCommittedResource().
      Since iglo D3D12 currently uses CreateCommittedResource(), it creates textures/buffers a bit slower than it could.
      To make it faster, we need to write a resource heap memory manager from scratch.

TODO: The D3D12 ig::Texture implementation should hold a CPU-only non-shader-visible descriptor for use with
      rendertexture / depthbuffer / unordered access clear. Maybe call this struct ig::NonShaderDescriptor? For D3D12 only.
      Since these descriptors are CPU-only, i think we can allocate multiple CPU-only descriptor heaps in chunks as needed,
      maybe 1000 descriptors at once. Not having to create new RTV/DSV descriptors every time you set or clear a render target
      would provide a small performance boost and would reduce the size of ig::Texture since it wouldn't have to contain
      a large RTV/DSV desc struct.

TODO: Ability to change window cursors and to hide window cursor.

TODO: Ability for window to fully capture mouse. This is required for first person shooter games.

TODO: For more advanced text functionality, i have two future classes in mind: ig::FormattedText and ig::InputText.
      A single ig::Text class isn't enough for all use cases. That's why we need 2 text classes.
      •ig::FormattedText: text.SetResourceManager(&formattedTextResourceManager);
                          text.SetFormattedText("some <i>italic</i> text and <color=Blue>colored</color> text and <fontSize=48>large</fontSize>").
                          Uses ScaledSprites vertices and draws with BatchRenderer.
                          Is not meant for super large amounts of text, and is not meant for continuously appending text (such as chatboxes and logs).
                          Supports scrolling, text.SetScrollX() and text.SetScrollY().
                          It doesn't have to recalculate all vertices when scrolling, i think.
                          Supports wordwrap and text alignment (such as top, topleft, center, bottom, bottomright, left, right, etc...).
                          Supports inserting sprites in the text.
                          Uses per-vertex scaling, so fonts of different sizes in the same text can be scaled to appear as the same font size.
      •ig::InputText: Optimized for appending text many times and text metrics (inputboxes/textboxes).
                      Only supports topleft alignment (and maybe also topcenter alignment) and only 1 font at a time.
                      Doesn't have to recalculate all vertices when new text is appended.
                      Supports scrolling (doesn't have to recalculate all vertices when scrolling, i think).
                      Supports text metrics (such as converting XY position to character index and vice versa).
      I haven't decided whether you should draw text like this: formattedText.Draw(batchRenderer)
      or like this: batchRenderer.DrawFormattedText(formattedText).
      User can manually adjust the world matrix of batchrenderer to position the text without needing to rebuild vertices.
      When implementing ig::FormattedText, it would be a good idéa to reuse some code from the function 'DrawAlignedStringInsideRect()'
      which already handles wordwrap and text alignment logic.
      It's important that the texture coords used in ScaledSprite vertex is pixel based (1 unit = 1 texture pixel),
      so that any previously built text vertices doesn't get invalidated when the font atlas texture grows in size.

